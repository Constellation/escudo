/*
 * dom3events.idl
 *
 * Document Object Model (DOM) Level 3 Events Specification
 *
 * Original W3C Working Draft 06 September 2012:
 *
 *   http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120906/
 */

module events {

typedef dom::DOMObject DOMObject;
typedef dom::Document Document;
typedef dom::DOMTimeStamp DOMTimeStamp;
typedef dom::Node Node;
typedef dom::DOMException DOMException;

typedef html::Window AbstractView;  // AbstractView has been practically obsoleted.

#if 0  // obsoleted by DOM Standard

// Introduced in DOM Level 2:
interface Event
{
  // PhaseType
  const unsigned short              NONE            = 0;
  const unsigned short              CAPTURING_PHASE = 1;
  const unsigned short              AT_TARGET       = 2;
  const unsigned short              BUBBLING_PHASE  = 3;

  readonly attribute DOMString      type;
  readonly attribute EventTarget?   target;
  readonly attribute EventTarget?   currentTarget;
  readonly attribute unsigned short eventPhase;
  readonly attribute boolean        bubbles;
  readonly attribute boolean        cancelable;
  readonly attribute DOMTimeStamp   timeStamp;
  void                              stopPropagation();
  void                              preventDefault();
  void                              initEvent(DOMString eventTypeArg,
                                              boolean canBubbleArg,
                                              boolean cancelableArg);
  // Introduced in DOM Level 3:
  void                              stopImmediatePropagation();
  readonly attribute boolean        defaultPrevented;
  readonly attribute boolean        isTrusted;
};



// Introduced in DOM Level 3:
interface CustomEvent : Event
{
  readonly attribute any detail;
};



// Introduced in DOM Level 2:
interface EventTarget
{
  // Modified in DOM Level 3:
  void    addEventListener(DOMString type,
                           EventListener? listener,
                           optional boolean useCapture = false);
  void    removeEventListener(DOMString type,
                              EventListener? listener,
                              optional boolean useCapture = false);
  boolean dispatchEvent(Event event);
};



// Introduced in DOM Level 2:
callback interface EventListener
{
  void handleEvent(Event event);
};



// Introduced in DOM Level 2:
[NoInterfaceObject]
interface DocumentEvent
{
  // Modified in DOM Level 3:
  Event createEvent(DOMString eventInterface);
};
Document implements DocumentEvent;



#endif  // obsoleted by DOM Standard



// Introduced in DOM Level 2:
interface UIEvent : Event
{
  readonly attribute AbstractView? view;
  readonly attribute long          detail;
  // Deprecated in DOM Level 3:
  void                             initUIEvent(DOMString typeArg,
                                               boolean canBubbleArg,
                                               boolean cancelableArg,
                                               AbstractView? viewArg,
                                               long detailArg);
};



// Introduced in DOM Level 3:
interface FocusEvent : UIEvent
{
  readonly attribute EventTarget? relatedTarget;
};



// Modified in DOM Level 3:
interface MouseEvent : UIEvent {
  readonly attribute long           screenX;
  readonly attribute long           screenY;
  readonly attribute long           clientX;
  readonly attribute long           clientY;
  readonly attribute boolean        ctrlKey;
  readonly attribute boolean        shiftKey;
  readonly attribute boolean        altKey;
  readonly attribute boolean        metaKey;
  readonly attribute unsigned short button;
  readonly attribute unsigned short buttons;
  readonly attribute EventTarget?   relatedTarget;
  // Deprecated in DOM Level 3:
  void                              initMouseEvent(DOMString typeArg,
                                                   boolean canBubbleArg,
                                                   boolean cancelableArg,
                                                   AbstractView? viewArg,
                                                   long detailArg,
                                                   long screenXArg,
                                                   long screenYArg,
                                                   long clientXArg,
                                                   long clientYArg,
                                                   boolean ctrlKeyArg,
                                                   boolean altKeyArg,
                                                   boolean shiftKeyArg,
                                                   boolean metaKeyArg,
                                                   unsigned short buttonArg,
                                                   EventTarget? relatedTargetArg);
  // Introduced in DOM Level 3:
  boolean                           getModifierState(DOMString keyArg);
};



// Introduced in DOM Level 3:
interface WheelEvent : MouseEvent
{
  // DeltaModeCode
  const unsigned long              DOM_DELTA_PIXEL = 0x00;
  const unsigned long              DOM_DELTA_LINE  = 0x01;
  const unsigned long              DOM_DELTA_PAGE  = 0x02;

  readonly attribute double         deltaX;
  readonly attribute double         deltaY;
  readonly attribute double         deltaZ;
  readonly attribute unsigned long deltaMode;
};



// Introduced in DOM Level 3:
interface KeyboardEvent : UIEvent
{
  // KeyLocationCode
  const unsigned long              DOM_KEY_LOCATION_STANDARD = 0x00;
  const unsigned long              DOM_KEY_LOCATION_LEFT     = 0x01;
  const unsigned long              DOM_KEY_LOCATION_RIGHT    = 0x02;
  const unsigned long              DOM_KEY_LOCATION_NUMPAD   = 0x03;
  const unsigned long              DOM_KEY_LOCATION_MOBILE   = 0x04;
  const unsigned long              DOM_KEY_LOCATION_JOYSTICK = 0x05;

  readonly attribute DOMString     char;
  readonly attribute DOMString     key;
  readonly attribute unsigned long location;
  readonly attribute boolean       ctrlKey;
  readonly attribute boolean       shiftKey;
  readonly attribute boolean       altKey;
  readonly attribute boolean       metaKey;
  readonly attribute boolean       repeat;
  readonly attribute DOMString     locale;
  boolean                          getModifierState(DOMString keyArg);
};



// Introduced in DOM Level 3:
interface CompositionEvent : UIEvent
{
  readonly attribute DOMString? data;
  readonly attribute DOMString  locale;
};



// Deprecated in DOM Level 3:
interface MutationEvent : Event
{
  // attrChangeType
  const unsigned short              MODIFICATION = 1;
  const unsigned short              ADDITION     = 2;
  const unsigned short              REMOVAL      = 3;

  readonly attribute DOMObject      relatedNode;  // Note Attr is not a Node in DOM Standard
  readonly attribute DOMString      prevValue;
  readonly attribute DOMString      newValue;
  readonly attribute DOMString      attrName;
  readonly attribute unsigned short attrChange;
  void                              initMutationEvent(DOMString typeArg,
                                                      boolean canBubbleArg,
                                                      boolean cancelableArg,
                                                      DOMObject relatedNodeArg,
                                                      DOMString prevValueArg,
                                                      DOMString newValueArg,
                                                      DOMString attrNameArg,
                                                      unsigned short attrChangeArg);
};



// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional EventInit eventInitDict)]
partial interface Event
{
};

// Suggested initEvent initializer:
dictionary EventInit {
  boolean bubbles    = false;
  boolean cancelable = false;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional CustomEventInit customEventInitDict)]
partial interface CustomEvent
{
  // Originally introduced (and deprecated) in DOM Level 3:
  void initCustomEvent(DOMString typeArg,
                       boolean canBubbleArg,
                       boolean cancelableArg,
                       any detailArg);
};

// Suggested initCustomEvent replacement initializer:
dictionary CustomEventInit {
  // Attributes from Event:
  boolean bubbles    = false;
  boolean cancelable = false;

  // Attributes for CustomEvent:
  any     detail     = null;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional UIEventInit dictUIEventInit)]
partial interface UIEvent
{
};

// Suggested initUIEvent replacement initializer:
dictionary UIEventInit {
  // Attributes from Event:
  boolean       bubbles    = false;
  boolean       cancelable = false;

  // Attributes for UIEvent:
  AbstractView? view       = null;
  long          detail     = 0;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional FocusEventInit focusEventInitDict)]
partial interface FocusEvent
{
  // Originally introduced (and deprecated) in DOM Level 3:
  void initFocusEvent(DOMString typeArg,
                      boolean canBubbleArg,
                      boolean cancelableArg,
                      AbstractView? viewArg,
                      long detailArg,
                      EventTarget? relatedTargetArg);
};

// Suggested initFocusEvent replacement initializer:
dictionary FocusEventInit {
  // Attributes from Event:
  boolean       bubbles       = false;
  boolean       cancelable    = false;

  // Attributes from UIEvent:
  AbstractView? view          = null;
  long          detail        = 0;

  // Attributes for FocusEvent:
  EventTarget?  relatedTarget = null;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional MouseEventInit mouseEventInitDict)]
partial interface MouseEvent
{
};

// Suggested initMouseEvent replacement initializer:
dictionary MouseEventInit {
  // Attributes from Event:
  boolean        bubbles       = false;
  boolean        cancelable    = false;

  // Attributes from UIEvent:
  AbstractView?  view          = null;
  long           detail        = 0;

  // Attributes for MouseEvent:
  long           screenX       = 0;
  long           screenY       = 0;
  long           clientX       = 0;
  long           clientY       = 0;
  boolean        ctrlKey       = false;
  boolean        shiftKey      = false;
  boolean        altKey        = false;
  boolean        metaKey       = false;
  unsigned short button        = 0;
  // Note: "buttons" was not previously initializable through initMouseEvent!
  unsigned short buttons       = 0;
  EventTarget?   relatedTarget = null;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional WheelEventInit wheelEventInitDict)]
partial interface WheelEvent
{
  // Originally introduced (and deprecated) in DOM Level 3:
  void initWheelEvent(DOMString typeArg,
                      boolean canBubbleArg,
                      boolean cancelableArg,
                      AbstractView? viewArg,
                      long detailArg,
                      long screenXArg,
                      long screenYArg,
                      long clientXArg,
                      long clientYArg,
                      unsigned short buttonArg,
                      EventTarget? relatedTargetArg,
                      DOMString modifiersListArg,
                      double deltaXArg,
                      double deltaYArg,
                      double deltaZArg,
                      unsigned long deltaMode);
};

// Suggested initWheelEvent replacement initializer:
dictionary WheelEventInit {
  // Attributes from Event:
  boolean        bubbles       = false;
  boolean        cancelable    = false;

  // Attributes from UIEvent:
  AbstractView?  view          = null;
  long           detail        = 0;

  // Attributes from MouseEvent:
  long           screenX       = 0;
  long           screenY       = 0;
  long           clientX       = 0;
  long           clientY       = 0;
  boolean        ctrlKey       = false;
  boolean        shiftKey      = false;
  boolean        altKey        = false;
  boolean        metaKey       = false;
  unsigned short button        = 0;
  // Note: "buttons" was not previously initializable through initMouseEvent!
  unsigned short buttons       = 0;
  EventTarget?   relatedTarget = null;

  // Attributes for WheelEvent:
  double          deltaX        = 0.0;
  double          deltaY        = 0.0;
  double          deltaZ        = 0.0;
  unsigned long  deltaMode     = 0;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional KeyboardEventInit keyboardEventInitDict)]
partial interface KeyboardEvent
{
  // Originally introduced (and deprecated) in DOM Level 3:
  void initKeyboardEvent(DOMString typeArg,
                         boolean canBubbleArg,
                         boolean cancelableArg,
                         AbstractView? viewArg,
                         DOMString charArg,
                         DOMString keyArg,
                         unsigned long locationArg,
                         DOMString modifiersListArg,
                         boolean repeat,
                         DOMString localeArg);
};

// Suggested initKeyboardEvent replacement initializer:
dictionary KeyboardEventInit {
  // Attributes from Event:
  boolean       bubbles    = false;
  boolean       cancelable = false;

  // Attributes from UIEvent:
  AbstractView? view       = null;
  long          detail     = 0;

  // Attributes for KeyboardEvent:
  DOMString     char       = "";
  DOMString     key        = "";
  unsigned long location   = 0;
  boolean       ctrlKey    = false;
  boolean       shiftKey   = false;
  boolean       altKey     = false;
  boolean       metaKey    = false;
  boolean       repeat     = false;
  DOMString     locale     = "";

  // (Legacy) key attributes for KeyboardEvent:
  unsigned long charCode   = 0;
  unsigned long keyCode    = 0;
  unsigned long which      = 0;
};


// Event Constructor Syntax:
[Constructor(DOMString typeArg, optional CompositionEventInit compositionEventInitDict)]
partial interface CompositionEvent
{
  // Originally introduced (and deprecated) in DOM Level 3:
  void initCompositionEvent(DOMString typeArg,
                         boolean canBubbleArg,
                         boolean cancelableArg,
                         AbstractView? viewArg,
                         DOMString? dataArg,
                         DOMString localeArg);
};

// Suggested initCompositionEvent replacement initializer:
dictionary CompositionEventInit {
  // Attributes from Event:
  boolean       bubbles    = false;
  boolean       cancelable = false;

  // Attributes from UIEvent:
  AbstractView? view       = null;
  long          detail     = 0;

  // Attributes for CompositionEvent:
  DOMString?    data       = null;
  DOMString     locale     = "";
};


// introduced in DOM Level 3:
partial interface KeyboardEvent
{
  // The following support legacy user agents:
  readonly attribute unsigned long charCode;
  readonly attribute unsigned long keyCode;
  readonly attribute unsigned long which;
};


};
