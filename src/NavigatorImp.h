// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_NAVIGATORIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_NAVIGATORIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/Navigator.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class NavigatorImp : public ObjectMixin<NavigatorImp>
{
public:
    // Navigator
    // NavigatorID
    std::u16string getAppName();
    std::u16string getAppVersion();
    std::u16string getPlatform();
    std::u16string getUserAgent();
    // NavigatorOnLine
    bool getOnLine();
    // NavigatorContentUtils
    void registerProtocolHandler(const std::u16string& scheme, const std::u16string& url, const std::u16string& title);
    void registerContentHandler(const std::u16string& mimeType, const std::u16string& url, const std::u16string& title);
    std::u16string isProtocolHandlerRegistered(const std::u16string& scheme, const std::u16string& url);
    std::u16string isContentHandlerRegistered(const std::u16string& mimeType, const std::u16string& url);
    void unregisterProtocolHandler(const std::u16string& scheme, const std::u16string& url);
    void unregisterContentHandler(const std::u16string& mimeType, const std::u16string& url);
    // NavigatorStorageUtils
    void yieldForStorageUpdates();
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::Navigator::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::Navigator::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_NAVIGATORIMP_H_INCLUDED
