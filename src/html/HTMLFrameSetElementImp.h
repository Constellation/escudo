// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLFRAMESETELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLFRAMESETELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLFrameSetElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/events/EventHandlerNonNull.h>
#include <org/w3c/dom/events/OnErrorEventHandlerNonNull.h>
#include <org/w3c/dom/html/HTMLElement.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLFrameSetElementImp : public ObjectMixin<HTMLFrameSetElementImp, HTMLElementImp>
{
public:
    // HTMLFrameSetElement
    std::u16string getCols();
    void setCols(const std::u16string& cols);
    std::u16string getRows();
    void setRows(const std::u16string& rows);
    events::EventHandlerNonNull getOnafterprint();
    void setOnafterprint(events::EventHandlerNonNull onafterprint);
    events::EventHandlerNonNull getOnbeforeprint();
    void setOnbeforeprint(events::EventHandlerNonNull onbeforeprint);
    events::EventHandlerNonNull getOnbeforeunload();
    void setOnbeforeunload(events::EventHandlerNonNull onbeforeunload);
    events::EventHandlerNonNull getOnblur();
    void setOnblur(events::EventHandlerNonNull onblur);
    events::OnErrorEventHandlerNonNull getOnerror();
    void setOnerror(events::OnErrorEventHandlerNonNull onerror);
    events::EventHandlerNonNull getOnfocus();
    void setOnfocus(events::EventHandlerNonNull onfocus);
    events::EventHandlerNonNull getOnhashchange();
    void setOnhashchange(events::EventHandlerNonNull onhashchange);
    events::EventHandlerNonNull getOnload();
    void setOnload(events::EventHandlerNonNull onload);
    events::EventHandlerNonNull getOnmessage();
    void setOnmessage(events::EventHandlerNonNull onmessage);
    events::EventHandlerNonNull getOnoffline();
    void setOnoffline(events::EventHandlerNonNull onoffline);
    events::EventHandlerNonNull getOnonline();
    void setOnonline(events::EventHandlerNonNull ononline);
    events::EventHandlerNonNull getOnpagehide();
    void setOnpagehide(events::EventHandlerNonNull onpagehide);
    events::EventHandlerNonNull getOnpageshow();
    void setOnpageshow(events::EventHandlerNonNull onpageshow);
    events::EventHandlerNonNull getOnpopstate();
    void setOnpopstate(events::EventHandlerNonNull onpopstate);
    events::EventHandlerNonNull getOnresize();
    void setOnresize(events::EventHandlerNonNull onresize);
    events::EventHandlerNonNull getOnscroll();
    void setOnscroll(events::EventHandlerNonNull onscroll);
    events::EventHandlerNonNull getOnstorage();
    void setOnstorage(events::EventHandlerNonNull onstorage);
    events::EventHandlerNonNull getOnunload();
    void setOnunload(events::EventHandlerNonNull onunload);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLFrameSetElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLFrameSetElement::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLFRAMESETELEMENTIMP_H_INCLUDED
