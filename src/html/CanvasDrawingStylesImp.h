// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_CANVASDRAWINGSTYLESIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_CANVASDRAWINGSTYLESIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/CanvasDrawingStyles.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class CanvasDrawingStylesImp : public ObjectMixin<CanvasDrawingStylesImp>
{
public:
    // CanvasDrawingStyles
    double getLineWidth();
    void setLineWidth(double lineWidth);
    std::u16string getLineCap();
    void setLineCap(const std::u16string& lineCap);
    std::u16string getLineJoin();
    void setLineJoin(const std::u16string& lineJoin);
    double getMiterLimit();
    void setMiterLimit(double miterLimit);
    void setLineDash(Sequence<double> segments);
    Sequence<double> getLineDash();
    double getLineDashOffset();
    void setLineDashOffset(double lineDashOffset);
    std::u16string getFont();
    void setFont(const std::u16string& font);
    std::u16string getTextAlign();
    void setTextAlign(const std::u16string& textAlign);
    std::u16string getTextBaseline();
    void setTextBaseline(const std::u16string& textBaseline);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::CanvasDrawingStyles::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::CanvasDrawingStyles::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_CANVASDRAWINGSTYLESIMP_H_INCLUDED
