// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "HTMLFrameSetElementImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

std::u16string HTMLFrameSetElementImp::getCols()
{
    // TODO: implement me!
    return u"";
}

void HTMLFrameSetElementImp::setCols(const std::u16string& cols)
{
    // TODO: implement me!
}

std::u16string HTMLFrameSetElementImp::getRows()
{
    // TODO: implement me!
    return u"";
}

void HTMLFrameSetElementImp::setRows(const std::u16string& rows)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnafterprint()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnafterprint(events::EventHandlerNonNull onafterprint)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnbeforeprint()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnbeforeprint(events::EventHandlerNonNull onbeforeprint)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnbeforeunload()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnbeforeunload(events::EventHandlerNonNull onbeforeunload)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnblur()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnblur(events::EventHandlerNonNull onblur)
{
    // TODO: implement me!
}

events::OnErrorEventHandlerNonNull HTMLFrameSetElementImp::getOnerror()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnerror(events::OnErrorEventHandlerNonNull onerror)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnfocus()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnfocus(events::EventHandlerNonNull onfocus)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnhashchange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnhashchange(events::EventHandlerNonNull onhashchange)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnload()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnload(events::EventHandlerNonNull onload)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnmessage()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnmessage(events::EventHandlerNonNull onmessage)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnoffline()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnoffline(events::EventHandlerNonNull onoffline)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnonline()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnonline(events::EventHandlerNonNull ononline)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnpagehide()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnpagehide(events::EventHandlerNonNull onpagehide)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnpageshow()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnpageshow(events::EventHandlerNonNull onpageshow)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnpopstate()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnpopstate(events::EventHandlerNonNull onpopstate)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnresize()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnresize(events::EventHandlerNonNull onresize)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnscroll()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnscroll(events::EventHandlerNonNull onscroll)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnstorage()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnstorage(events::EventHandlerNonNull onstorage)
{
    // TODO: implement me!
}

events::EventHandlerNonNull HTMLFrameSetElementImp::getOnunload()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLFrameSetElementImp::setOnunload(events::EventHandlerNonNull onunload)
{
    // TODO: implement me!
}

}
}
}
}
