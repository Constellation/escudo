// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_MEDIACONTROLLERIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_MEDIACONTROLLERIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/MediaController.h>
#include "EventTargetImp.h"

#include <org/w3c/dom/events/EventTarget.h>
#include <org/w3c/dom/events/EventHandlerNonNull.h>
#include <org/w3c/dom/html/MediaController.h>
#include <org/w3c/dom/html/TimeRanges.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class MediaControllerImp : public ObjectMixin<MediaControllerImp, EventTargetImp>
{
public:
    // MediaController
    unsigned short getReadyState();
    html::TimeRanges getBuffered();
    html::TimeRanges getSeekable();
    double getDuration();
    double getCurrentTime();
    void setCurrentTime(double currentTime);
    bool getPaused();
    html::MediaControllerPlaybackState getPlaybackState();
    html::TimeRanges getPlayed();
    void pause();
    void unpause();
    void play();
    double getDefaultPlaybackRate();
    void setDefaultPlaybackRate(double defaultPlaybackRate);
    double getPlaybackRate();
    void setPlaybackRate(double playbackRate);
    double getVolume();
    void setVolume(double volume);
    bool getMuted();
    void setMuted(bool muted);
    events::EventHandlerNonNull getOnemptied();
    void setOnemptied(events::EventHandlerNonNull onemptied);
    events::EventHandlerNonNull getOnloadedmetadata();
    void setOnloadedmetadata(events::EventHandlerNonNull onloadedmetadata);
    events::EventHandlerNonNull getOnloadeddata();
    void setOnloadeddata(events::EventHandlerNonNull onloadeddata);
    events::EventHandlerNonNull getOncanplay();
    void setOncanplay(events::EventHandlerNonNull oncanplay);
    events::EventHandlerNonNull getOncanplaythrough();
    void setOncanplaythrough(events::EventHandlerNonNull oncanplaythrough);
    events::EventHandlerNonNull getOnplaying();
    void setOnplaying(events::EventHandlerNonNull onplaying);
    events::EventHandlerNonNull getOnended();
    void setOnended(events::EventHandlerNonNull onended);
    events::EventHandlerNonNull getOnwaiting();
    void setOnwaiting(events::EventHandlerNonNull onwaiting);
    events::EventHandlerNonNull getOndurationchange();
    void setOndurationchange(events::EventHandlerNonNull ondurationchange);
    events::EventHandlerNonNull getOntimeupdate();
    void setOntimeupdate(events::EventHandlerNonNull ontimeupdate);
    events::EventHandlerNonNull getOnplay();
    void setOnplay(events::EventHandlerNonNull onplay);
    events::EventHandlerNonNull getOnpause();
    void setOnpause(events::EventHandlerNonNull onpause);
    events::EventHandlerNonNull getOnratechange();
    void setOnratechange(events::EventHandlerNonNull onratechange);
    events::EventHandlerNonNull getOnvolumechange();
    void setOnvolumechange(events::EventHandlerNonNull onvolumechange);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::MediaController::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::MediaController::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_MEDIACONTROLLERIMP_H_INCLUDED
