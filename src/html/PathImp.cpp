// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "PathImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

void PathImp::addPath(html::Path path, svg::SVGMatrix transformation)
{
    // TODO: implement me!
}

void PathImp::addPathByStrokingPath(html::Path path, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation)
{
    // TODO: implement me!
}

void PathImp::addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y)
{
    // TODO: implement me!
}

void PathImp::addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y, double maxWidth)
{
    // TODO: implement me!
}

void PathImp::addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y)
{
    // TODO: implement me!
}

void PathImp::addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y, double maxWidth)
{
    // TODO: implement me!
}

void PathImp::addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path)
{
    // TODO: implement me!
}

void PathImp::addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path, double maxWidth)
{
    // TODO: implement me!
}

void PathImp::addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path)
{
    // TODO: implement me!
}

void PathImp::addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path, double maxWidth)
{
    // TODO: implement me!
}

void PathImp::closePath()
{
    // TODO: implement me!
}

void PathImp::moveTo(double x, double y)
{
    // TODO: implement me!
}

void PathImp::lineTo(double x, double y)
{
    // TODO: implement me!
}

void PathImp::quadraticCurveTo(double cpx, double cpy, double x, double y)
{
    // TODO: implement me!
}

void PathImp::bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y)
{
    // TODO: implement me!
}

void PathImp::arcTo(double x1, double y1, double x2, double y2, double radius)
{
    // TODO: implement me!
}

void PathImp::rect(double x, double y, double w, double h)
{
    // TODO: implement me!
}

void PathImp::arc(double x, double y, double radius, double startAngle, double endAngle)
{
    // TODO: implement me!
}

void PathImp::arc(double x, double y, double radius, double startAngle, double endAngle, bool anticlockwise)
{
    // TODO: implement me!
}

void PathImp::ellipse(double x, double y, double radiusX, double radiusY, double rotation, double startAngle, double endAngle, bool anticlockwise)
{
    // TODO: implement me!
}

}
}
}
}
