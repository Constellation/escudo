// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_PATHIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_PATHIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/Path.h>

#include <org/w3c/dom/svg/SVGMatrix.h>
#include <org/w3c/dom/html/CanvasDrawingStyles.h>
#include <org/w3c/dom/html/Path.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class PathImp : public ObjectMixin<PathImp>
{
public:
    // Path
    void addPath(html::Path path, svg::SVGMatrix transformation);
    void addPathByStrokingPath(html::Path path, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation);
    void addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y);
    void addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y, double maxWidth);
    void addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y);
    void addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, double x, double y, double maxWidth);
    void addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path);
    void addText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path, double maxWidth);
    void addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path);
    void addPathByStrokingText(const std::u16string& text, html::CanvasDrawingStyles styles, svg::SVGMatrix transformation, html::Path path, double maxWidth);
    // CanvasPathMethods
    void closePath();
    void moveTo(double x, double y);
    void lineTo(double x, double y);
    void quadraticCurveTo(double cpx, double cpy, double x, double y);
    void bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y);
    void arcTo(double x1, double y1, double x2, double y2, double radius);
    void rect(double x, double y, double w, double h);
    void arc(double x, double y, double radius, double startAngle, double endAngle);
    void arc(double x, double y, double radius, double startAngle, double endAngle, bool anticlockwise);
    void ellipse(double x, double y, double radiusX, double radiusY, double rotation, double startAngle, double endAngle, bool anticlockwise);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::Path::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::Path::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_PATHIMP_H_INCLUDED
