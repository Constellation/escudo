// Generated by esidl 0.3.0.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_RANGEIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_RANGEIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/ranges/Range.h>

#include <org/w3c/dom/views/ClientRectList.h>
#include <org/w3c/dom/views/ClientRect.h>
#include <org/w3c/dom/Node.h>
#include <org/w3c/dom/DocumentFragment.h>
#include <org/w3c/dom/ranges/Range.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class RangeImp : public ObjectMixin<RangeImp>
{
public:
    // Range
    Node getStartContainer();
    unsigned int getStartOffset();
    Node getEndContainer();
    unsigned int getEndOffset();
    bool getCollapsed();
    Node getCommonAncestorContainer();
    void setStart(Node refNode, unsigned int offset);
    void setEnd(Node refNode, unsigned int offset);
    void setStartBefore(Node refNode);
    void setStartAfter(Node refNode);
    void setEndBefore(Node refNode);
    void setEndAfter(Node refNode);
    void collapse(bool toStart);
    void selectNode(Node refNode);
    void selectNodeContents(Node refNode);
    short compareBoundaryPoints(unsigned short how, ranges::Range sourceRange);
    void deleteContents();
    DocumentFragment extractContents();
    DocumentFragment cloneContents();
    void insertNode(Node node);
    void surroundContents(Node newParent);
    ranges::Range cloneRange();
    void detach();
    bool isPointInRange(Node node, unsigned int offset);
    short comparePoint(Node node, unsigned int offset);
    bool intersectsNode(Node node);
    std::u16string toString();
    // Range-53
    views::ClientRectList getClientRects();
    views::ClientRect getBoundingClientRect();
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return ranges::Range::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return ranges::Range::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_RANGEIMP_H_INCLUDED
